const input = `
#.##..##.#..#.##..##....##..#..#####...#.###.#..##..#..#.#...##..##....
##..###.#.#.#..##.##.####.........#...#..#..#.#..#.#....##..###.#.##..#
#.......###....#.#.##.#.#.#.##..###...###..##.....#...#.##.##.......##.
...##.#......#.#.#..#.###..#.###....#....#.###.##....####....##....##..
.#...##..###...##.#.#..#...####.#.##.#.#..#.##.###.###.#.##.##..#.#...#
#..##....##.#..##.##...###..##.#...##...#####...#####.##..#.###....#.#.
###....#....#.##.####.###.#..####..##..##..#..#.##.#######.##....###...
###..###.....###..##..##....#......#.#.##...####.######..###.###....###
#.#.###.###.....###.####.#.####...#.#.###.#...#.##..##.##.#..####..#...
####.##...#....##.##.#.#....##.###....#.#..#.....##...##.#...###.##.#.#
...#.#..####.###...###.#....###...##.####..#.######.##.##..#.#..##...#.
#####......#.####.#####...#...#..#..#.#.#.#.#.#.#.#.##.#..#.###.#....#.
#..#.#.#..#...#.#.##..#.######.##..#.###...#.#.#...#.####..##..##..#.#.
..#.#..###....#.##.##....####.#########..#.########..##....#..#..##..#.
.#.#.#...##...##.#.#..#..#####..###....#..#...####.##.####.###.##..##..
.##.####..#.#######..#.#######..##..###....#.#..#..##.#..#.#..###.....#
#....#.#####..#.##...###.###....#.#.#.#..#.##.####...#...##..#####.##..
...##.###.##...#.##.###.#.###....####.....#.##.##.##.###...###.###.#.##
..###...#...##....#.###.....##..####..#.###.####..##.###....##.#....##.
...#..##..#..##.###.#....###....#..##..#...##.#..##.#.####...##.##..###
######.......####..#..#.#####.......#####..#.#..##..#......#.#.#.#####.
.#...#..#.##.###..#.#.#..####.#.########.#.###..####.#..#.#..###.#####.
...####.#..#..#.##...#.#####.########.##..##....#####.#.##..######.#.##
.....#..##.#.....#..#.#.##..######..####.#..#....##.....###.#.#..##..#.
..##.##..##.#.#.##...##.##...#..##.....#..#..#.#.#.....#.#.##.###...###
##.#..#.#.####.##....#...##.#...#...#..#.##..#...##.....#.#.##.#####...
...#..##..##...#..###....#..#.###..####...#.#..##.###.##......###.#.#.#
..##.#.#.##..###.....#..##.#....#....#....#.##..#.#.####.#....##..#..##
.##..##..#.#.....###..#.#..#.##.#.#.#..#..#.##.#.###...#..#..##.#....##
......#...######....###.##..#.###.####.##.##...#.###...####.##..#..#...
#..##.#.###.##......####...#.#.##.#.#....##.##..#.#.....####...#..###..
..##...#.##..#.....#######.#.#.###.#.##...####..#.#....##.###..##.#.###
...####..#..##.########..#####.##..##...#..##..##..#...###.###....#.###
.###.#..#.##.#..###.#.##.#.#...#.#.#.##..##.#....###.#..#.....#..##..#.
...##.##...#..#.####.....#.##....####.#.###..##...#..#.####...##..##.##
###...##....##..##.#...##......#...##.##.#.....##..##.#..#.##......#..#
.......#.######...#####....#...#####.#####...##..#..#.#.#..........#.#.
#######.#...#.#..#..#..##..#.####..#.##..###..###.##.#...#.#..#.####.##
.#..#......#.#....###.#..##..####.#..#.#..##..#####.#....##.#####.#.#.#
.#.###.###..#..#.#.#.#..##.#......###.##.#....#######.#..#.#####.....##
#.####..###.#..###.#.#...##.##....###.#.#.#.###..#...#...#.##.###...#..
#..##..##.##..##....###..######....#.#####.##..#...#....#.#.###.###....
#.###..##.##..#.....##...#..#..#####.#.##..##..#.#...#.....##.#..#.##.#
##...#...#.##..####..#..#.###....#...#.....#.#.#.###...###...#####.#.##
.#.###.....#.#..#.###########.######..#########.##.##..#.#.#...#..##.##
##.#################.#.##.##....####.....#..#.#.##.###.##..#..#.##..#.#
.##.####.#.#..##.##.#.#..#.###.#..#..#.####....#.###.####.#.#..##..####
##....###.#.####.#.#.............##.....###.##.#.###.####...#####.##.#.
...##.#.#.#####.####.##.#..##.###.###.####.#.#.....#.#.#...#####..####.
######.#....#...#.#.######.#.#....#.##..#..#..#..#.......#..#.##.#.#...
...#..#....#.#.#...###.####..##.#.#..#.#.#.####.#..###...###.######...#
#.#.###......##...#...##....###......#.###...#...###..#..####..##...#.#
#..##.....#........###.##..#.#.#.#.##..#.##.#..###.##.#.####..###.##.#.
.##....#..##.###.#.#.#..#..###..#..#####.##....#..#####.#.##..#.##.###.
.#.##.###.####.#.#..#.###.###.#.......####.##...#..##.#.##.##..#.###...
#.##...#####.#...#.#.##..###.#.##.###########..#...#..#.#.###.#.##..#.#
##...#...#.###.#..##..#...##....#...#.#....###.###.#.#..#...#.#.#.#.###
#.#.######.##.#....#.....#..##...#.#####...##.##...#..###.#...##.#..##.
##.#######.....#....#.###..#..#.###.###..#.....####....#.####..#.....#.
#..#..##..##.#.##......#....#.#.....#......#...##.###..#.#.###.......##
#..#.#..######.#.......##..#...#....#####.#...#.##...#...###..####.##..
.....#.....#.#.##..###.###.##..#.##.##..#.#####..##.##..###..###..#.###
...#.###.#.#.#.##...##.##...#..#..#..####.#.##.#...#.#..##.#.#######.##
.####.####..#.####...#...#.#..##...##.##..#....#.#.###.###..#####...##.
..##.#.###.####.#####...#......#.#.###...###..##.##.###.####.###.#..#.#
#.##..####.#.#..#.##..#.##.#.##.#..###.####.#.#.#.##..#.....##.#.#...#.
.##...#.#.#####.###.#...###.#......#####.....#.#######.##.#..##...###..
##.#.#####......####.####...#####....#..####.#.#.####...####.###.###.##
#.#.#.####..##.##.##.#.##.#.#####.##...#....##..##...#.######.....#..##
.#.....#...###.#.#.###.#..#...###...##.......####...####.###..#....#...
..##.##..#......###...##.....##.#..#...###.##.#.##.##...#.#...#.#..#...
`;

const data = input
    .trim()
    .split(/\r?\n/)
    .filter(x => !!x);

class Elf {
    constructor(x, y) {
        this.x = x;
        this.y = y;
    }
}

const elves = data
    .map((line, y) => line.split("").map((char, x) => char === "#" ? new Elf(x, y) : null))
    .flat()
    .filter(x => !!x);

let directions = [
    { key: "N", deltas: [ {dx: -1, dy: -1}, {dx:  0, dy: -1}, {dx:  1, dy: -1} ] },
    { key: "S", deltas: [ {dx: -1, dy: +1}, {dx:  0, dy: +1}, {dx:  1, dy: +1} ] },
    { key: "W", deltas: [ {dx: -1, dy: -1}, {dx: -1, dy:  0}, {dx: -1, dy: +1} ] },
    { key: "E", deltas: [ {dx: +1, dy: -1}, {dx: +1, dy:  0}, {dx: +1, dy: +1} ] },
];

function print(elves) {
    const minx = Math.min(...elves.map(e => e.x)) - 1;
    const maxx = Math.max(...elves.map(e => e.x)) + 1;
    const miny = Math.min(...elves.map(e => e.y)) - 1;
    const maxy = Math.max(...elves.map(e => e.y)) + 1;

    for (let y = miny; y <= maxy; y++) {
        let line = "";
        for (let x = minx; x <= maxx; x++) {
            line += elves.some(e => e.x === x && e.y === y) ? "#" : ".";
        }
        console.log(line);
    }
}

let part1 = 0;
let part2 = 0;

for (let round = 0; round < 1000; round++) {
    console.log("Round", round);
    // print(elves);
    // console.log();

    // First half: determine move
    elves.forEach(elf => {
        elf.nextPos = null;
        const shouldMove = elves.some(e => e !== elf && Math.abs(e.x - elf.x) <= 1 && Math.abs(e.y - elf.y) <= 1);
        if (shouldMove) {
            for (let n = 0; n < directions.length; n++) {
                const canMove = !elves.some(e => directions[n].deltas.some(
                    delta => e.x === elf.x + delta.dx
                    &&
                    e.y === elf.y + delta.dy));
                if (canMove) {
                    elf.nextPos = {
                        x: elf.x + directions[n].deltas[1].dx,
                        y: elf.y + directions[n].deltas[1].dy,
                    }
                    break;
                }
            }
        }
    });

    // Second half: move (but only if you don't bump!)
    elves
        .filter(e => e.nextPos)
        .filter(e => !elves.some(other => other !== e
            && other.nextPos
            && other.nextPos.x === e.nextPos.x
            && other.nextPos.y === e.nextPos.y))
        .forEach(e => {
            // console.log("Moving!", e);
            e.x = e.nextPos.x;
            e.y = e.nextPos.y;
        });

    if (elves.every(e => e.nextPos === null)) {
        part2 = round + 1;
        break;
    }

    if (round === 9) {
        const minx = Math.min(...elves.map(e => e.x));
        const maxx = Math.max(...elves.map(e => e.x));
        const miny = Math.min(...elves.map(e => e.y));
        const maxy = Math.max(...elves.map(e => e.y));
        part1 = ((maxx - minx + 1) * (maxy - miny + 1)) - elves.length;
    }
    
    directions = [...directions.slice(1), directions[0]];
}

console.log("Part 1:", part1);
console.log("Part 2:", part2);
